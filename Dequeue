/**********
 
 Following is the main function we are using internally.
 Refer this for completing the Dequeue class.
 
 
 int main()
 {
 Deque dq(10);
 int choice,input;
 while(true) {
 cin >> choice;
 switch (choice) {
 case 1:
 cin >> input;
 dq.insertfront(input);
 break;
 case 2:
 cin >> input;
 dq.insertrear(input);
 break;
 case 3:
 dq.deletefront();
 break;
 case 4:
 dq.deleterear();
 break;
 case 5:
 cout << dq.getFront() << "\n";
 break;
 case 6:
 cout << dq.getRear() << "\n";
 break;
 default:
 return 0;
 }
 }
 
 return 0;
 }
 
 ************/


class Deque {
    // Complete this class
    int* arr;
    int front;
    int rear;
    int size;
    
public:
    // Constructor to initialize the deque with size 10
    Deque(int n = 10) {
        size = n;
        arr = new int[size];
        front = -1;
        rear = -1;
    }
    
    // Function to check if the deque is full
    bool isFull() {
        return ((front == 0 && rear == size - 1) || (front == rear + 1));
    }
    
    // Function to check if the deque is empty
    bool isEmpty() {
        return (front == -1);
    }
    
    // Function to insert an element at the front of the deque
    void insertFront(int input) {
        if (isFull()) {
            cout << -1 << endl;
            return;
        }
        if (isEmpty()) {  // If queue is initially empty
            front = 0;
            rear = 0;
        } else if (front == 0) {  // Front is at the first position of the array
            front = size - 1;
        } else {
            front = front - 1;
        }
        arr[front] = input;
    }
    
    void insertRear(int input) {
        if (isFull()) {
            cout << -1 << endl;
            return;
        }
        if (isEmpty()) {  
            front = 0;
            rear = 0;
        } else if (rear == size - 1) {  
            rear = 0;
        } else {
            rear = rear + 1;
        }
        arr[rear] = input;
    }
    
    void deleteFront() {
        if (isEmpty()) {
            cout << -1 << endl;
            return;
        }
        if (front == rear) {  
            front = -1;
            rear = -1;
        } else if (front == size - 1) {
            front = 0;
        } else {
            front = front + 1;
        }
    }
    
    void deleteRear() {
        if (isEmpty()) {
            cout << -1 << endl;
            return;
        }
        if (front == rear) {  // Queue has only one element
            front = -1;
            rear = -1;
        } else if (rear == 0) {
            rear = size - 1;
        } else {
            rear = rear - 1;
        }
    }
    
    int getFront() {
        if (isEmpty()) {
            return -1;
        }
        return arr[front];
    }
    
    int getRear() {
        if (isEmpty()) {
            return -1;
        }
        return arr[rear];
    }
};
