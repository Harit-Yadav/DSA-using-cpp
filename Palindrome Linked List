/****************************************************************
 
    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/

bool isPalindrome(Node *head)
{
	
    // Edge case: If the list is empty or has only one element, it's a palindrome.
    if (head == NULL || head->next == NULL) {
        return true;
    }

    // Step 1: Use slow and fast pointers to find the middle of the linked list
    Node* slow = head;
    Node* fast = head;
    
    // Move slow to the middle and fast to the end
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    // Step 2: Reverse the second half of the list starting from slow
    Node* prev = NULL;
    Node* curr = slow;
    Node* next = NULL;
    
    // Reverse the second half
    while (curr != NULL) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    
    // Now prev is the head of the reversed second half of the list
    Node* firstHalf = head;
    Node* secondHalf = prev;
    
    // Step 3: Compare the first half and the reversed second half
    while (secondHalf != NULL) {
        if (firstHalf->data != secondHalf->data) {
            return false; // The list is not a palindrome
        }
        firstHalf = firstHalf->next;
		
        secondHalf = secondHalf->next;
    }
    
    return true; // The list is a palindrome
}

