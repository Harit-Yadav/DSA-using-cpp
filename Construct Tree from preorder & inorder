#include <iostream>
#include <unordered_map>

// Forward declaration of buildTreeHelper
BinaryTreeNode<int>* buildTreeHelper(int* preorder, int preStart, int preEnd,
                                      int* inorder, int inStart, int inEnd);

BinaryTreeNode<int>* buildTree(int* preorder, int preLength, int* inorder, int inLength) {
    // Call the helper function for recursive construction
    return buildTreeHelper(preorder, 0, preLength - 1, inorder, 0, inLength - 1);
}

BinaryTreeNode<int>* buildTreeHelper(int* preorder, int preStart, int preEnd,
                                      int* inorder, int inStart, int inEnd) {
    // Base case: if no elements to process
    if (preStart > preEnd || inStart > inEnd) {
        return nullptr;
    }

    // The first element of preorder is the root
    int rootVal = preorder[preStart];
    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(rootVal);

    // Find the index of the root in inorder
    int rootInOrderIndex = -1;
    for (int i = inStart; i <= inEnd; i++) {
        if (inorder[i] == rootVal) {
            rootInOrderIndex = i;
            break;
        }
    }

    // Calculate the number of nodes in the left subtree
    int leftSize = rootInOrderIndex - inStart;

    // Recursively build the left and right subtrees
    root->left = buildTreeHelper(preorder, preStart + 1, preStart + leftSize,
                                  inorder, inStart, rootInOrderIndex - 1);
    root->right = buildTreeHelper(preorder, preStart + leftSize + 1, preEnd,
                                   inorder, rootInOrderIndex + 1, inEnd);

    return root;
}

